import { createSlice, nanoid } from "@reduxjs/toolkit"
import { createTodolistAC, deleteTodolistAC } from "@/features/todolists/model/todolists-slice.ts"

// üîπ –¢–∏–ø –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
export type Task = {
  id: string
  title: string
  isDone: boolean
}

// üîπ –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è: –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á ‚Äî id —Ç—É–¥—É–ª–∏—Å—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
export type TasksState = {
  [todolistId: string]: Task[]
}

// üîπ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—É—Å—Ç–æ–µ)
const initialState: TasksState = {}

// üîπ –°–æ–∑–¥–∞—ë–º slice
export const tasksSlice = createSlice({
  name: "tasks",
  initialState,
  reducers: (create) => ({
    // üóëÔ∏è 1. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    deleteTaskAC: create.reducer<{ todolistId: string; taskId: string }>((state, action) => {
      const tasks = state[action.payload.todolistId]
      const index = tasks.findIndex((task) => task.id === action.payload.taskId)
      if (index !== -1) {
        tasks.splice(index, 1)
      }
    }),

    // ‚ûï 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    createTaskAC: create.reducer<{ todolistId: string; title: string }>((state, action) => {
      const newTask: Task = { id: nanoid(), title: action.payload.title, isDone: false }
      // –µ—Å–ª–∏ —É —ç—Ç–æ–≥–æ —Ç—É–¥—É–ª–∏—Å—Ç–∞ –µ—â—ë –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ –∑–∞–¥–∞—á ‚Äî —Å–æ–∑–¥–∞—ë–º
      if (!state[action.payload.todolistId]) {
        state[action.payload.todolistId] = []
      }
      state[action.payload.todolistId].unshift(newTask)
    }),

    // ‚úÖ 3. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
    changeTaskStatusAC: create.reducer<{ todolistId: string; taskId: string; isDone: boolean }>((state, action) => {
      const task = state[action.payload.todolistId].find((task) => task.id === action.payload.taskId)
      if (task) {
        task.isDone = action.payload.isDone
      }
    }),

    // ‚úèÔ∏è 4. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    changeTaskTitleAC: create.reducer<{ todolistId: string; taskId: string; title: string }>((state, action) => {
      const task = state[action.payload.todolistId].find((task) => task.id === action.payload.taskId)
      if (task) {
        task.title = action.payload.title
      }
    }),
  }),
  extraReducers: (builder) => {
    builder
      .addCase(createTodolistAC, (state, action) => {
        state[action.payload.id] = []
      })
      .addCase(deleteTodolistAC, (state, action) => {
        delete state[action.payload.id]
      })
  },
})
// üéØ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º actions (Redux Toolkit —Å–æ–∑–¥–∞—ë—Ç –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
export const { deleteTaskAC, createTaskAC, changeTaskStatusAC, changeTaskTitleAC } = tasksSlice.actions

// üß† –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º reducer
export const tasksReducer = tasksSlice.reducer
