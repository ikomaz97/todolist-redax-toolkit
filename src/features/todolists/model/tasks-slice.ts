import { createSlice, nanoid } from "@reduxjs/toolkit"
import { createTodolistAC, deleteTodolistAC } from "./todolists-slice"

export type Task = {
  id: string
  title: string
  isDone: boolean
}

export type TasksState = Record<string, Task[]>

const initialState: TasksState = {}

export const tasksSlice = createSlice({
  name: "tasks",
  initialState,
  reducers: (create) => ({
    // üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    deleteTaskAC: create.reducer<{ todolistId: string; taskId: string }>((state, action) => {
      const tasks = state[action.payload.todolistId]
      const index = tasks.findIndex((task) => task.id === action.payload.taskId)
      if (index !== -1) {
        tasks.splice(index, 1)
      }
    }),

    // ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    createTaskAC: create.preparedReducer(
      (todolistId: string, title: string) => ({
        payload: { todolistId, title, id: nanoid() },
      }),
      (state, action) => {
        const { todolistId, title, id } = action.payload
        const newTask: Task = { id, title, isDone: false }

        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if (!state[todolistId]) {
          state[todolistId] = []
        }

        state[todolistId].unshift(newTask)
      },
    ),

    // üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    changeTaskStatusAC: create.reducer<{
      todolistId: string
      taskId: string
      isDone: boolean
    }>((state, action) => {
      const task = state[action.payload.todolistId].find((task) => task.id === action.payload.taskId)
      if (task) {
        task.isDone = action.payload.isDone
      }
    }),

    // ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
    changeTaskTitleAC: create.reducer<{
      todolistId: string
      taskId: string
      title: string
    }>((state, action) => {
      const task = state[action.payload.todolistId].find((task) => task.id === action.payload.taskId)
      if (task) {
        task.title = action.payload.title
      }
    }),
  }),

  // ‚ö° –í–Ω–µ—à–Ω–∏–µ —Ä–µ–¥—å—é—Å–µ—Ä—ã (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–ª–∞–π—Å–æ–≤)
  extraReducers: (builder) => {
    builder
      // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç—É–¥—É–ª–∏—Å—Ç–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
      .addCase(createTodolistAC, (state, action) => {
        state[action.payload.id] = []
      })
      // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É–¥—É–ª–∏—Å—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º –µ–≥–æ –∑–∞–¥–∞—á–∏
      .addCase(deleteTodolistAC, (state, action) => {
        delete state[action.payload.id]
      })
  },
})

// –≠–∫—Å–ø–æ—Ä—Ç action creators
export const { deleteTaskAC, createTaskAC, changeTaskStatusAC, changeTaskTitleAC } = tasksSlice.actions

// –≠–∫—Å–ø–æ—Ä—Ç reducer
export const tasksReducer = tasksSlice.reducer
