// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω—É–∂–Ω–æ–µ
import { createAsyncThunk, createSlice, nanoid } from "@reduxjs/toolkit"
import type { Todolist as ApiTodolist } from "@/features/todolists/api/todolistsApi.types"
import { todolistsApi } from "@/features/todolists/api/todolistsApi.ts"

// üîπ –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
export type FilterValues = "all" | "active" | "completed"

// üîπ –°–æ–∑–¥–∞—ë–º —Ç–∏–ø –¥–ª—è DomainTodolist (–æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ + –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ filter)
export type DomainTodolist = ApiTodolist & {
  filter: FilterValues
}

// ‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å—ë –≥–æ—Ç–æ–≤–æ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–ª–∞–π—Å–∞
export const todolistsSlice = createSlice({
  name: "todolists",
  initialState: [] as DomainTodolist[],
  reducers: (create) => ({
    // üß© setTodolistsAC ‚Äî –∫–ª–∞–¥—ë–º —Ç—É–¥—É–ª–∏—Å—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ state –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É filter
    setTodolistsAC: create.reducer<{ todolists: ApiTodolist[] }>((_, action) => {
      return action.payload.todolists.map((tl) => ({
        ...tl,
        filter: "all",
      }))
    }),

    // üóëÔ∏è deleteTodolistAC ‚Äî —É–¥–∞–ª—è–µ–º —Ç—É–¥—É–ª–∏—Å—Ç –ø–æ id
    deleteTodolistAC: create.reducer<{ id: string }>((state, action) => {
      const index = state.findIndex((tl) => tl.id === action.payload.id)
      if (index !== -1) {
        state.splice(index, 1)
      }
    }),

    // ‚úèÔ∏è changeTodolistTitleAC ‚Äî –º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–∞
    changeTodolistTitleAC: create.reducer<{ id: string; title: string }>((state, action) => {
      const index = state.findIndex((tl) => tl.id === action.payload.id)
      if (index !== -1) {
        state[index].title = action.payload.title
      }
    }),

    // ‚öôÔ∏è changeTodolistFilterAC ‚Äî –º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç—É–¥—É–ª–∏—Å—Ç–∞
    changeTodolistFilterAC: create.reducer<{ id: string; filter: FilterValues }>((state, action) => {
      const todolist = state.find((tl) => tl.id === action.payload.id)
      if (todolist) {
        todolist.filter = action.payload.filter
      }
    }),

    // ‚ûï createTodolistAC ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—É–¥—É–ª–∏—Å—Ç
    // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º preparedReducer, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å payload –≤—Ä—É—á–Ω—É—é
    createTodolistAC: create.preparedReducer(
      (title: string) => ({ payload: { title, id: nanoid() } }),
      (state, action) => {
        state.push({
          ...action.payload,
          filter: "all",
          addedDate: "",
          order: 0,
        })
      },
    ),
  }),
})

export const fetchTodolistsTC = createAsyncThunk(`${todolistsSlice.name}/fetchTodolistsTC`, (_, thunkAPI) => {
  // –≤ —Å–∞–Ω–∫–µ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
  todolistsApi.getTodolists().then((res) => {
    // –∏ –¥–∏—Å–ø–∞—Ç—á–∏—Ç—å —ç–∫—à–µ–Ω—ã (action) –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∞–Ω–∫–∏ (thunk)
    thunkAPI.dispatch(setTodolistsAC({ todolists: res.data }))
  })
})

// üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º action creators
export const { setTodolistsAC, deleteTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC, createTodolistAC } =
  todolistsSlice.actions

// üéØ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º reducer
export const todolistsReducer = todolistsSlice.reducer
